# -*- coding: utf-8 -*-
"""Copy of Final Notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NzFKVUo1GNdHzCuFGb0av6AdnzLZX246

# Preprocessing the Data
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from numpy.lib.arraysetops import setxor1d
from scipy.integrate import odeint

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/Math 142 Project/Datasets1/allData.csv', index_col='DateSpecCollect', parse_dates=True)

df_deaths = pd.read_csv('/content/drive/MyDrive/Math 142 Project/Datasets1/covid_deaths.csv')

df_deaths.loc[]

def cumulative_list(name, reference, table):
  size = table.shape[0]
  columns = list(table.columns)
  col_ind = columns.index(reference)
  arr = []
  for i in range(size):
    toAdd = table.iloc[0:i+1, col_ind].sum() + 0.0
    arr.append(toAdd)
  table[name] = arr
  return table

df_temp = df.sort_values(by='DateSpecCollect')
df_temp.drop(columns=['Total.1', '528641'], axis=1, inplace=True)
df_temp.rename(columns={'Total': 'Infected per day'}, inplace=True)
df_temp['7-day Avg'] = df_temp['Infected per day'].rolling(window=7).mean()
df_temp['28-day Avg'] = df_temp['Infected per day'].rolling(window=28).mean()
cumulative_list("Total Infected for 7-day Avg", "7-day Avg", df_temp)
cumulative_list("Total Infected for 28-day Avg", "28-day Avg", df_temp)
cumulative_list("Total Infected", "Infected per day", df_temp)
df_new = df_temp.loc['2020-03-15':'2022-02-08', :].copy()
df_new

df_new.to_csv('/content/drive/MyDrive/Math 142 Project/Datasets1/allData1.csv')

df_wave1 = df_new.loc['2020-04-01':'2020-09-30', :].copy()
df_wave2 = df_new.loc['2020-10-01': '2021-03-31', :].copy()
df_wave3 = df_new.loc['2021-07-01': '2021-10-31', :].copy()

df_wave1.to_csv('/content/drive/MyDrive/Math 142 Project/Datasets1/wave1Averaged_Nameer.csv')
df_wave2.to_csv('/content/drive/MyDrive/Math 142 Project/Datasets1/wave2Averaged_Nameer.csv')
df_wave3.to_csv('/content/drive/MyDrive/Math 142 Project/Datasets1/wave3Averaged_Nameer.csv')

"""# Plotting the Data"""

def odes(x, t, a_param, k_param):
  #constants
  # a = 1/infection_rate
  # k = 1/infectious_period
  a = a_param
  k = k_param

  #assign each ODE to a vector element
  S = x[0]
  I = x[1]
  R = x[2]

  #define each ODE
  dSdt = -a*S*I
  dIdt = a*S*I - k*I
  dRdt = k*I

  return [dSdt, dIdt, dRdt]

test_a = 1/2.5
test_k = 1/3

print(test_a/test_k)

from uuid import NAMESPACE_OID

#initial conditions
N = 3186989
I0 = 1/N
S0 = 1. - I0
R0 = 0.
x0 = [S0, I0, R0]

def wave1(a, k):
  #declare a time vector (time window)
  size1 = df_wave1.shape[0]
  t = np.linspace(0, size1-1, size1)
  #x = odeint(odes,x0,t, args=((1/2.5)+(0.01/2), (1/3)-0.01))

  #Experimental
  x = odeint(odes,x0,t, args=(a, k))

  S = x[:,0]
  I = x[:,1]
  R = x[:,2]

  y1_a = df_wave1['Total Infected for 7-day Avg'].to_numpy().copy()
  y1_a /= N
  y1_b = df_wave1['Total Infected for 28-day Avg'].to_numpy().copy()
  y1_b /= N
  y1_c = df_wave1['Total Infected'].to_numpy().copy()
  y1_c.astype(float)
  y1_c /= N
  y1 = np.array([y1_a, y1_b, y1_c])

  print("Max Infected peak: ", max(I))
  fig1 = plt.figure(1); fig1.clf()
  #plt.plot(t, S, 'g', lw=3, label='Suseptible')
  plt.plot(t, I, 'r', lw=3, label='Infective')
  #plt.plot(t, R, 'b', lw=3, label='Removed')
  # plt.plot(t, y1[0], 'y', lw=3, label='Total Infected for 7-day Avg')
  # plt.plot(t, y1[1], 'b', lw=3, label='Total Infected for 28-day Avg')
  # plt.plot(t, y2[2], 'black', lw=3, label='Total Infected')
  plt.scatter(t, y1[0], s=5, facecolors='none', edgecolors='y', label='Total Infected for 7-day Avg')
  plt.scatter(t, y1[1], s=5, facecolors='none', edgecolors='b', label='Total Infected for 28-day Avg')
  plt.scatter(t, y1[2], s=5, facecolors='none', edgecolors='black', label='Total Infected')
  plt.axis([0, 125, 0, 0.015])

  fig1.legend()
  plt.xlabel('Time (days)')
  plt.ylabel('Population')

  return S, I, R

# const = 0.41
# a = 0.5 * const
# k = (1/4) * const

const = 0.41
a = 0.5 * const
k = (1/4) * const
S, I, R = wave1(a, k)
R0 = a/k
print("a = ", a)
print("k = ", k)
print("R0 = ", R0)
# print("S(120) = ", S[120])
# print("I(120) = ", I[120])

size = df_new.shape[0]
t = np.linspace(0, size-1, size)
something = df_new['Infected per day'].to_numpy().copy()
something.astype(float)
something / N
a = 1/8
k = 1/7
x = odeint(odes,x0,t, args=(a, k))

S = x[:,0]
I = x[:,1]
R = x[:,2]

plt.plot(t, something, 'y', lw=3, label='Daily new cases')
plt.plot(t, S, 'g', lw=3, label='Suseptible')
plt.plot(t, I, 'r', lw=3, label='Infective')
plt.plot(t, R, 'b', lw=3, label='Removed')

something.astype(float)
something / N

#intersets at about t=124
N2 = int(S[126] * N)
N2

t = np.linspace(0, df_new.shape[0] - 1, df_new.shape[0])
plt.plot(t, df_new)

np.log(np.exp(2))
d = (1/120) * np.log(N*y1_a[120])
test_k = 1/3
test_a = test_k + d
print(test_a)
print(test_k)

max(y2_c)

#higher a-value means higher peak but shorter pandemic
#higher k-value means lower peak but longer pandemic

def wave2(a, k):
  size2 = df_wave2.shape[0]
  t = np.linspace(0, size2-1, size2)
  x = odeint(odes,x0,t, args=(a, k))

  S = x[:,0]
  I = x[:,1]
  R = x[:,2]

  y2_a = df_wave2['Total Infected for 7-day Avg'].to_numpy().copy()
  y2_a /= N2
  y2_b = df_wave2['Total Infected for 28-day Avg'].to_numpy().copy()
  y2_b /= N2
  y2_c = df_wave2['Total Infected'].to_numpy().copy()
  y2_c.astype(float)
  y2_c /= N2
  y2 = np.array([y2_a, y2_b, y2_c])

  fig2 = plt.figure(1); fig2.clf()
  #plt.plot(t, S, 'g', lw=3, label='Suseptible')
  plt.plot(t, I, 'r', lw=3, label='Infective')
  #plt.plot(t, R, 'b', lw=3, label='Removed')
  plt.plot(t, y2[0], 'y', lw=3, label='7-day Avg')
  plt.plot(t, y2[1], 'brown', lw=3, label='28-day Avg')
  plt.plot(t, y2[2], 'm', lw=3, label='Raw Data')

  fig2.legend()
  plt.xlabel('Time (days)')
  plt.ylabel('Population')

  return S, I, R

const = 0.35
a = 0.7*const
k = 0.3333333333333333*const
S, I, R = wave2(a, k)
R0 = a/k
print("a = ", a)
print("k = ", k)
print("R0 = ", R0)
print("Max = ", max(I))

d = (1/50) * np.log(N*y2_a[50])
test_k = 1/3
test_a = test_k + d
print(test_a)
print(test_k)

fig1 = plt.figure(1); fig1.clf()
#plt.plot(t, S, 'g', lw=3, label='Suseptible')
plt.plot(t, I, 'r', lw=3, label='Infective')
#plt.plot(t, R, 'b', lw=3, label='Removed')
plt.plot(t, y1[0], 'y', lw=3, label='7-day Avg')
plt.plot(t, y1[1], 'brown', lw=3, label='28-day Avg')
plt.plot(t, y1[2], 'm', lw=3, label='Raw Data')

fig1.legend()
plt.xlabel('Time (days)')
plt.ylabel('Population')

t = np.linspace(0, 10)
x = odeint(odes,x0,t, args=(6,1.4))

S = x[:,0]
I = x[:,1]
R = x[:,2]

print(max(I))
fig = plt.figure(1); fig.clf()
plt.plot(t, S, 'g', lw=3, label='Suseptible')
plt.plot(t, I, 'r', lw=3, label='Infective')
plt.plot(t, R, 'b', lw=3, label='Removed')

fig.legend()
plt.xlabel('Time (days)')
plt.ylabel('Population')

print(max(I))
print(max(y1[0]))

df_wave1