# -*- coding: utf-8 -*-
"""COVID.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/118OiJMhwlAE8Y9yZbAnjTXeVTisM7eKt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from numpy.lib.arraysetops import setxor1d
from scipy.integrate import odeint

from google.colab import drive
drive.mount('/content/drive')

###LOADING DATASET###
df = pd.read_csv('/content/drive/MyDrive/UCI Conference/Public_OC_COVID_Cases_by_City_by_Day.csv')

#https://data.chhs.ca.gov/dataset/f333528b-4d38-4814-bebb-12db1f10f535/resource/046cdd2b-31e5-4d34-9ed3-b48cdbc4be7a/download/covid19cases_test.csv
#https://data.chhs.ca.gov/dataset/f333528b-4d38-4814-bebb-12db1f10f535/resource/e2c6a86b-d269-4ce1-b484-570353265183/download/covid19casesdemographics.csv

###PROCESSING THE DATASET###
df_new = df.rename({'Total': 'dI'}, axis=1, inplace=False)

#creating the I(t) and dI/dt column
#assuming 0 cases in June 12, 2020
'''
dI_list = list(df_new['dI'])
I_list = [0 for i in range(len(dI_list))]
I_list[0] = dI_list[0]

for k in range(1, len(dI_list)):
  I_list[k] = dI_list[k] + I_list[k - 1]

I = pd.DataFrame(I_list, columns=['I'])
df_new = pd.concat([df_new, I], axis=1)
'''
#population of OC according to the US Census Bureau as of April 1, 2020
N = 3186989

df_new['di'] = df_new['dI']/N
#df_new['i'] = df_new['I']/N
df_new

def cumulative_list(original):
  final = [0 for i in range(len(original))]
  final[0] = original[0]
  for k in range(1, len(original)):
    final[k] = original[k] + final[k - 1]
  return final

def derivative_list(original):
  final = [0 for i in range(len(original))]
  final[0] = original[0]
  for k in range(1, len(original)):
    final[k] = original[k] - original[k - 1]
  return final

a = [3,6,7,10,13,18,29,33,40]
print("Expected:", list(df_new['dI']))
print("Actual:", derivative_list(I_list))

R_list = [0 for i in range(df.shape[0])]
#inputting data from OC
R_list[0] = 4758; R_list[1] = 4806; R_list[2] = 5004; R_list[3] = 5143;
R_list[4] = 5323; R_list[5] = 5476; R_list[6] = 5635; R_list[7] = 5725;
R_list[8] = 5799; R_list[9] = 5867; R_list[10] = 6112; R_list[11] = 6301;
R_list[12] = 6514; R_list[13] = 6663; R_list[14] = 6794; R_list[15] = 6896;
R_list[16] = 7086; R_list[17] = 7287; R_list[18] = 7506; R_list[19] = 7715;
R_list[20] = 7918;
R = pd.DataFrame(R_list, columns=['R'])
df_test = pd.concat([df_new, R], axis=1)
df_test['r'] = df_test['R']/N

I_list = [0 for i in range(df.shape[0])]
I_list[0] = 10111; I_list[1] = 10259; I_list[2] = 10620; I_list[3] = 11149;
I_list[4] = 11729; I_list[5] = 12378; I_list[6] = 13083; I_list[7] = 13553;
I_list[8] = 13832; I_list[9] = 14712; I_list[10] = 15740; I_list[11] = 16801;
I_list[12] = 17812; I_list[13] = 18805; I_list[14] = 19429; I_list[15] = 19881;
I_list[16] = 20926; I_list[17] = 21980; I_list[18] = 22961; I_list[19] = 23893;
I_list[20] = 24656;
I = pd.DataFrame(I_list, columns=['I'])
df_test = pd.concat([df_test, I], axis=1)
df_test['i'] = df_test['I']/N
df_test

y0 = list(df_new['i'])
x = [i for i in range(len(y0))]
plt.plot(x, y0)
plt.show()

y1 = list(df_new['di'])
plt.plot(x, y1)
plt.show()

temp=3186989
N = 8000000

#Define Variables

def euler_model(a_param, k_param, days_param, dt_param, N_param = N):
  #Define Variables

  #Length of the simulation
  days = days_param
  #Time step
  dt = dt_param
  #steps -- the number of points
  steps = int(days/dt)

  #Constants
  N = N_param
  a = a_param
  k = k_param

  #Initialize
  S = np.zeros(steps)
  I = np.zeros(steps)
  R = np.zeros(steps)
  t = np.arange(steps)*dt

  I[0] = 1/N
  S[0] = 1. - I[0]
  R[0] = 0.

  for i in range(steps-1):
    S[i+1] = S[i] - a*S[i]*I[i]*dt
    I[i+1] = I[i] + (a*S[i]*I[i] - k*I[i])*dt
    R[i+1] = R[i] + k*I[i]*dt

  #Plot
  fig = plt.figure(1); fig.clf()
  plt.plot(t, S, 'g', lw=3, label='Suseptible')
  plt.plot(t, I, 'r', lw=3, label='Infective')
  plt.plot(t, R, 'b', lw=3, label='Removed')

  fig.legend()
  plt.xlabel('Time (days)')
  plt.ylabel('Population')

euler_model(6, 1.4, 10, 0.25)

S = None
I = None
R = None
def odes(x, t):
  #constants
  a = 6
  k = 1.4

  #assign each ODE to a vector element
  S = x[0]
  I = x[1]
  R = x[2]

  #define each ODE
  dSdt = -a*S*I
  dIdt = a*S*I - k*I
  dRdt = k*I

  return [dSdt, dIdt, dRdt]

#initial conditions
N = 8000000
I0 = 1/N
S0 = 1. - I0
R0 = 0.
x0 = [S0, I0, R0]

#declare a time vector (time window)
t = np.linspace(0, 10)
x = odeint(odes,x0,t)

S = x[:,0]
I = x[:,1]
R = x[:,2]

plt.plot(t, S, 'g', lw=3, label='Suseptible')
plt.plot(t, I, 'r', lw=3, label='Infective')
plt.plot(t, R, 'b', lw=3, label='Removed')
plt.show()

max(I)

for i in range(10):
  print(i)

test = [5,3,2,7,8,1,9,6]

def moving_average(period, data):
  size = len(data)
  n_groups = (size - period) + 1
  retList = [0] * n_groups
  start = 0
  sum = 0

  for i in range(n_groups):
    for j in range(period):
      sum += data[start + j]
    retList[i] = sum/period
    sum = 0
    start += 1

  lagList = [0] * (period - 1)
  retList = lagList + retList

  return retList

print(moving_average(3, test))

df_new['dI']

test = list(df_new['dI'])
print(moving_average(7, test))